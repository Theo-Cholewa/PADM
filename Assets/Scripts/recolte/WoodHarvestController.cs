using UnityEngine;

public class WoodHarvestController : MonoBehaviour
{
    [Header("R√©f√©rences enfants")]
    public TouchIndicatorWaveMulti[] indicators;   // R√©f√©rences vers les deux composants enfants

    [Header("Objets √† activer quand les deux joueurs sont pr√™ts")]
    public GameObject[] harvestObjects;

    [Header("Objets √† desactiver quand les deux joueurs sont pr√™ts")]
    public GameObject[] triggerObjects;

    [Header("Prefab √† masquer quand on appuie sur ESPACE")]
    public GameObject prefabToHide;

    [Header("Composant dont on veut supprimer un script")]
    public GameObject targetObject;
    public string scriptNameToRemove;

    private bool allActivated = false;

    void Start()
    {
        // Si rien n‚Äôest assign√© manuellement, on r√©cup√®re automatiquement les enfants
        if (indicators == null || indicators.Length == 0)
            indicators = GetComponentsInChildren<TouchIndicatorWaveMulti>();

        if (harvestObjects != null)
        {
            // D√©sactive tous les objets de r√©colte au d√©part
            foreach (var obj in harvestObjects)
            {
                obj?.SetActive(false);
            }
        }
        
        if (triggerObjects != null)
        {
            // Active tous les objets de trigger au d√©part
            foreach (var obj in triggerObjects)
            {
                obj?.SetActive(true);
            }
        }
    }

    void Update()
    {
        if (Input.GetKeyDown(KeyCode.Space))
        {
            ActivateHarvestObjects(false);
            ActivateTriggerObjects(false);
            prefabToHide?.SetActive(false);

            if (targetObject != null && !string.IsNullOrEmpty(scriptNameToRemove))
            {
                var component = targetObject.GetComponent(scriptNameToRemove);
                if (component != null)
                {
                    if (component is IslandPulse islandPulse && islandPulse.islandRenderer != null)
                    {
                        islandPulse.islandRenderer.material.color = islandPulse.baseColor;
                        Debug.Log("üé® Couleur de l'√Æle r√©initialis√©e avant suppression du script.");
                    }
                    Destroy(component);
                    Debug.Log($"üóëÔ∏è Script '{scriptNameToRemove}' supprim√© de {targetObject.name}");
                }
                else
                {
                    Debug.LogWarning($"‚ö†Ô∏è Aucun script nomm√© '{scriptNameToRemove}' trouv√© sur {targetObject.name}");
                }
            }
            return;
        }
        
        if (indicators == null || indicators.Length == 0)
            return;

        bool everyoneActive = true;

        // V√©rifie si chaque TouchIndicatorWaveMulti est actif
        foreach (var indicator in indicators)
        {
            if (indicator == null || !indicator.isTouched)
            {
                everyoneActive = false;
                break;
            }
        }

        // Si tous sont activ√©s et que ce n‚Äô√©tait pas encore le cas ‚Üí message console
        if (everyoneActive && !allActivated)
        {
            allActivated = true;
            ActivateHarvestObjects(true);
            ActivateTriggerObjects(false);
        }

        // Si un se rel√¢che, on peut repasser √† false (facultatif)
        if (!everyoneActive && allActivated)
        {
            allActivated = false;
            ActivateHarvestObjects(false);
            ActivateTriggerObjects(true);
        }
    }

    void ActivateHarvestObjects(bool state)
    {
        if (harvestObjects == null) return;

        foreach (var obj in harvestObjects)
        {
            obj?.SetActive(state);
        }

        if (state)
            Debug.Log("üå≤ R√©colte possible ‚Äî objets activ√©s !");
        else
            Debug.Log("‚ùå R√©colte interrompue ‚Äî objets d√©sactiv√©s.");
    }

    void ActivateTriggerObjects(bool state)
    {
        if (triggerObjects == null) return;

        foreach (var obj in triggerObjects)
        {
            obj?.SetActive(state);
        }

        if (state)
            Debug.Log("üîî Triggers activ√©s.");
        else
            Debug.Log("üîï Triggers d√©sactiv√©s.");
    }
}
